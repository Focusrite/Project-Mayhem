# Project Mayhem

This documentation will explain the following classes

* Runnable
* GameState
* Level
* Graphic
* DirectInput

**NOTE:** I'm not a friend with the formatting yet...

##Runnable

Runnable is the root of the program. It sets up the window and DirectX and prepares it for drawing. These two function takes care of everything that has to do with initializing the window:

`bool initWindow();`

`bool initDiRectX();`

Runnable also have the game loop that constantly updates and draws everything. The method **run()** have a loop inside it which loops untill the program is closed. Each frame the update and draw method gets called. In pseudo code it looks something like this:

`void Runnable::run()`    
`{`       
`    while(!quit)  {`    
    `         update(deltaTime);`    
    `         draw();`   
    `    }`   
`}`   

The class **Game** is inherited from Runnable and overwrites the update(float dt) and draw() functions. It's in Game the real game code starts. Game itself only contains a game state, which does all of the job. Game just calls the current game states update and draw function. The main job for Game is to maintain and switch to the correct game state when it's needed.

##GameState
There's an abstract base class that all game states inherits from which is called GameState. The game states are added to make the code cleaner and split it up in logical parts. Examples of some game states could be PlayState, MenuState, OptionState etc.. Once the user presses the play button we leave the MenuState and the PlayState gets activated for example. The game state system follows the singleton-pattern, which is described here:

[[http://en.wikipedia.org/wiki/Singleton_pattern]]

The game states in this game is based on this tutorial:

[[http://gamedevgeek.com/tutorials/managing-game-states-in-c/]]

Right now there's just one game state called **PlayState**. It contains a Level member which stores all the objects on the map including the player. PlayStates update and draw function just calls the Levels corresponding functions.

##Level
The level stores all objects on the map. They are stored in a std::vector and Level have two functions to add and remove objects from that list:

`void addObject(Object* object);`
`void removeObject(Object* object);`

The object passed to addObject(...) get's a unique ID by the Level which later is used so we can identify objects. Levels update and draw functions loop through the list containing all objects and call their update and draw function. The level also has responsebility to delete all objects once the game shuts down, important to remember since deleting something twice will cause errors.

##Graphic
Graphic is a class that wraps up drawing with DirectX in some easy to use functions. There's a global instance of Graphic called gGraphics which is used wherever it's needed. Currently there's two drawing functions and one function do load textures with:

`void drawRect(float x, float y, int width, int height, D3DCOLOR fillColor = D3DCOLOR_ARGB(155, 155, 0, 0));`

`void drawTexture(IDirect3DTexture9 *texture, float x, float y, int width, int height);`

`IDirect3DTexture9* loadTexture(std::string filename);`

The Object class uses Graphic in the following way:

`Object::draw()`

`{`

`    gGraphics->drawTexture(mTexture, getX(), getY(), getWidht(), getHeight());`

`}`

##DirectInput
DirectInput wraps up input handling for DirectX and contains methods to poll information about both the keyboard and the mouse. Just like Graphic there's a global instance of DirectInput, called gDInput, that is used wherever it's needed. An example of using DirectInput:

`void PlayState::update(double dt)`    
`{`    
`	// mPlayer is an Object*`     
`	if(gDInput->keyDown(DIK_W))`   
`		mPlayer->move(0, -MOVE_SPEED);`   
`	else if(gDInput->keyDown(DIK_S))`   
`		mPlayer->move(0, MOVE_SPEED);`   
`	if(gDInput->keyDown(DIK_A))`   
`		mPlayer->move(-MOVE_SPEED, 0);`   
`	else if(gDInput->keyDown(DIK_D))`   
`		mPlayer->move(MOVE_SPEED, 0);`   
`}`   
